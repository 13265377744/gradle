Index: web/src/main/java/haday/demo/annotation/Design.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/Design.java	(date 1588238844771)
+++ web/src/main/java/haday/demo/annotation/Design.java	(date 1588238844771)
@@ -0,0 +1,22 @@
+package haday.demo.annotation;
+
+import java.lang.annotation.*;
+
+/**
+ * @Description: @Target,@Retention,@Inherited,@Documented
+ * 这四个是对注解进行注解的元注解，负责自定义的注解的属性
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 17:26
+ */
+
+@Target({ElementType.TYPE, ElementType.METHOD})    //表示注解的作用对象，ElementType.TYPE表示类，ElementType.METHOD表示方法
+@Retention(RetentionPolicy.RUNTIME)        //表示注解的保留机制，RetentionPolicy.RUNTIME表示运行时注解
+@Inherited            //表示该注解可继承
+@Documented            //表示该注解可生成文档
+public @interface Design {
+
+    String author();        //注解成员，如果注解只有一个成员，则成员名必须为value()，成员类型只能为原始类型
+
+    int data() default 0;    //注解成员，默认值为0
+}
Index: web/src/main/java/haday/demo/annotation/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/Student.java	(date 1588239299517)
+++ web/src/main/java/haday/demo/annotation/Student.java	(date 1588239299517)
@@ -0,0 +1,19 @@
+package haday.demo.annotation;
+
+/**
+ * @Description: Student
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 17:27
+ */
+@Design(author = "flypie", data = 111)
+public class Student {
+
+    @Design(author = "zhizunbao", data = 555)
+    public void live() {
+    }
+
+    @Design(author = "yitianchou", data = 999)
+    public void eat() {
+    }
+}
Index: web/src/test/java/web/LibraryTest.java
===================================================================
--- web/src/test/java/web/LibraryTest.java	(revision 0a08796b0e123b537f769a6288a076b0838b15bf)
+++ web/src/test/java/haday/demo/web/LibraryTest.java	(date 1588205383881)
@@ -1,7 +1,7 @@
 /*
  * This Java source file was generated by the Gradle 'init' task.
  */
-package web;
+package haday.demo.web;
 
 import org.junit.Test;
 import static org.junit.Assert.*;
Index: web/src/main/java/haday/demo/annotation/StudentTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/StudentTest.java	(date 1588239264080)
+++ web/src/main/java/haday/demo/annotation/StudentTest.java	(date 1588239264080)
@@ -0,0 +1,50 @@
+package haday.demo.annotation;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+
+/**
+ * @Description: Student测试
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 17:29
+ */
+
+public class StudentTest {
+
+    public static void main(String[] args) throws ClassNotFoundException {
+
+        Class c = Class.forName("haday.demo.annotation.Student");        //使用类加载器加载类
+
+        //1、找到类上的注解
+        if (c.isAnnotationPresent(Design.class)) {    //判断类是否被指定注解注解
+            Design d = (Design) c.getAnnotation(Design.class);    //拿到类上的指定注解实例
+            System.out.println(d.data());
+            System.out.println(d.author());
+        }
+
+        //2、找到方法上的注解
+        Method[] ms = c.getMethods();
+        for (Method m : ms) {
+            if (m.isAnnotationPresent(Design.class)) {    //判断方法是否被指定注解注解
+                Design d = m.getAnnotation(Design.class);        //拿到类上的指定注解实例
+                System.out.println(d.data());
+                System.out.println(d.author());
+            }
+        }
+
+        //3、另外一种方法
+        for (Method m : ms) {
+            Annotation[] as = m.getAnnotations();        //拿到类上的注解集合
+            for (Annotation a : as) {
+                if (a instanceof Design) {        //判断指定注解
+                    Design d = (Design) a;
+                    System.out.println(d.data());
+                    System.out.println(d.author());
+                }
+            }
+        }
+
+    }
+
+}
Index: web/src/main/java/web/Library.java
===================================================================
--- web/src/main/java/web/Library.java	(revision 0a08796b0e123b537f769a6288a076b0838b15bf)
+++ web/src/main/java/haday/demo/web/Library.java	(date 1588205383944)
@@ -1,7 +1,7 @@
 /*
  * This Java source file was generated by the Gradle 'init' task.
  */
-package web;
+package haday.demo.web;
 
 public class Library {
     public boolean someLibraryMethod() {
Index: web/src/main/java/haday/demo/test/Effective.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/Effective.java	(date 1588224301586)
+++ web/src/main/java/haday/demo/test/Effective.java	(date 1588224301586)
@@ -0,0 +1,61 @@
+package haday.demo.test;
+
+import java.util.*;
+
+/**
+ * @Description: http://www.ahwang.cn/ent/20200430/2047476.html
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 8:20
+ */
+
+public class Effective {
+
+    public static void main(String[] args) {
+        double x = Double.parseDouble(args[0]);
+        double y = Double.parseDouble(args[1]);
+        for (Operation op : Operation.values())
+            System.out.printf("%f %s %f = %f%n",
+                    x, op, y, op.apply(x, y));
+    }
+
+
+    private static void unsafeAdd(List list, Object o) {
+        list.add(o);
+    }
+
+    // Generic method
+    public static <E> Set<E> union(Set<E> s1, Set<E> s2) {
+        Set<E> result = new HashSet<E>(s1);
+        result.addAll(s2);
+        return result;
+    }
+
+    // Generic singleton factory pattern
+    private static UnaryFunction<Object> IDENTITY_FUNCTION =
+            new UnaryFunction<Object>() {
+                public Object apply(Object arg) {
+                    return arg;
+                }
+            };
+
+    // IDENTITY_FUNCTION is stateless and its type parameter is
+    // unbounded so it's safe to share one instance across all types.
+    @SuppressWarnings("unchecked")
+    public static <T> UnaryFunction<T> identityFunction() {
+        return (UnaryFunction<T>) IDENTITY_FUNCTION;
+    }
+
+    // Returns the maximum value in a list - uses recursive type bound
+    public static <T extends Comparable<T>> T max(List<T> list) {
+        Iterator<T> i = list.iterator();
+        T result = i.next();
+        while (i.hasNext()) {
+            T t = i.next();
+            if (t.compareTo(result) > 0)
+                result = t;
+        }
+        return result;
+    }
+
+}
Index: web/src/main/java/haday/demo/test/UnaryFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/UnaryFunction.java	(date 1588214175888)
+++ web/src/main/java/haday/demo/test/UnaryFunction.java	(date 1588214175888)
@@ -0,0 +1,14 @@
+package haday.demo.test;
+
+/**
+ * @Description:
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 10:34
+ */
+
+public interface UnaryFunction<T> {
+
+    T apply(T arg);
+
+}
Index: web/src/main/java/haday/demo/test/Comparable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/Comparable.java	(date 1588214510419)
+++ web/src/main/java/haday/demo/test/Comparable.java	(date 1588214510419)
@@ -0,0 +1,13 @@
+package haday.demo.test;
+
+/**
+ * @Description:
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 10:41
+ */
+
+public interface Comparable<T> {
+
+    int compareTo(T o);
+}
Index: service/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- service/build.gradle	(revision 0a08796b0e123b537f769a6288a076b0838b15bf)
+++ service/build.gradle	(date 1588211594178)
@@ -57,7 +57,9 @@
 	// https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas
 	compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '3.17'
 	// https://mvnrepository.com/artifact/org.projectlombok/lombok
-	compile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
+	compile("org.projectlombok:lombok:1.18.8")
+    annotationProcessor 'org.projectlombok:lombok:1.18.8'
+    compileOnly 'org.projectlombok:lombok:1.18.8'
 	// https://mvnrepository.com/artifact/com.alibaba/fastjson
 	compile group: 'com.alibaba', name: 'fastjson', version: '1.2.58'
 	// https://mvnrepository.com/artifact/cn.minsin/mutils-core
Index: web/src/main/java/haday/demo/test/Favorites.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/Favorites.java	(date 1588234499660)
+++ web/src/main/java/haday/demo/test/Favorites.java	(date 1588234499660)
@@ -0,0 +1,32 @@
+package haday.demo.test;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @Description:
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 10:43
+ */
+
+public class Favorites<E> {
+
+    private Map<Class<?>, Object> favorites =
+            new HashMap<Class<?>, Object>();
+
+    public <T> void putFavorite(Class<T> type, T instance) {
+        if (type == null)
+            throw new NullPointerException("Type is null");
+        favorites.put(type, instance);
+    }
+
+    public <T> T getFavorite(Class<T> type) {
+        return type.cast(favorites.get(type));
+    }
+
+    public static void main(String[] args) {
+        System.out.println("args[0] = " + args[0]);
+        System.out.println("args[0] = " + args[1]);
+    }
+}
Index: master/src/main/java/haday/demo/mapper/fourth/ItgProjectMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- master/src/main/java/haday/demo/mapper/fourth/ItgProjectMapper.java	(revision 0a08796b0e123b537f769a6288a076b0838b15bf)
+++ master/src/main/java/haday/demo/mapper/fourth/ItgProjectMapper.java	(date 1573197752861)
@@ -6,6 +6,7 @@
 import org.apache.ibatis.annotations.Param;
 
 public interface ItgProjectMapper {
+
     long countByExample(ItgProjectExample example);
 
     int deleteByExample(ItgProjectExample example);
@@ -27,4 +28,5 @@
     int updateByPrimaryKeySelective(ItgProject record);
 
     int updateByPrimaryKey(ItgProject record);
+
 }
\ No newline at end of file
Index: web/src/main/java/haday/demo/annotation/DeprecatedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/DeprecatedTest.java	(date 1588236044899)
+++ web/src/main/java/haday/demo/annotation/DeprecatedTest.java	(date 1588236044899)
@@ -0,0 +1,43 @@
+package haday.demo.annotation;
+
+import java.util.Calendar;
+import java.util.Date;
+
+/**
+ * @Description: Deprecated测试
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 16:40
+ */
+
+public class DeprecatedTest {
+
+    // @Deprecated 修饰 getString1(),表示 它是建议不被使用的函数
+    @Deprecated
+    private static void getString1() {
+        System.out.println("Deprecated Method");
+    }
+
+    private static void getString2() {
+        System.out.println("Normal Method");
+    }
+
+    // Date是日期/时间类。java已经不建议使用该类了
+    private static void testDate() {
+        Date date = new Date(113, 8, 25);
+        System.out.println(date.getYear());
+    }
+
+    // Calendar是日期/时间类。java建议使用Calendar取代Date表示"日期/时间"
+    private static void testCalendar() {
+        Calendar cal = Calendar.getInstance();
+        System.out.println(cal.get(Calendar.YEAR));
+    }
+
+    public static void main(String[] args) {
+        getString1();
+        getString2();
+        testDate();
+        testCalendar();
+    }
+}
Index: master/src/main/java/haday/demo/mapper/second/FirptQuotaMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- master/src/main/java/haday/demo/mapper/second/FirptQuotaMapper.java	(revision 0a08796b0e123b537f769a6288a076b0838b15bf)
+++ master/src/main/java/haday/demo/mapper/second/FirptQuotaMapper.java	(date 1573197760395)
@@ -10,6 +10,7 @@
 
 
 public interface FirptQuotaMapper {
+
     long countByExample(FirptQuotaExample example);
 
     int deleteByExample(FirptQuotaExample example);
@@ -31,4 +32,5 @@
     int updateByPrimaryKeySelective(FirptQuota record);
 
     int updateByPrimaryKey(FirptQuota record);
+
 }
\ No newline at end of file
Index: web/src/main/java/haday/demo/annotation/Inheritable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/Inheritable.java	(date 1588236464571)
+++ web/src/main/java/haday/demo/annotation/Inheritable.java	(date 1588236464571)
@@ -0,0 +1,15 @@
+package haday.demo.annotation;
+
+import java.lang.annotation.*;
+
+/**
+ * @Description: 自定义的Annotation
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 16:44
+ */
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+//@Inherited
+public @interface Inheritable {
+}
Index: web/src/main/java/haday/demo/annotation/InheritableFather.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/InheritableFather.java	(date 1588236358032)
+++ web/src/main/java/haday/demo/annotation/InheritableFather.java	(date 1588236358032)
@@ -0,0 +1,15 @@
+package haday.demo.annotation;
+
+/**
+ * @Description: 父Inheritable
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 16:44
+ */
+@Inheritable
+public class InheritableFather {
+    public InheritableFather() {
+        // InheritableBase是否具有 Inheritable Annotation
+        System.out.println("InheritableFather:" + InheritableFather.class.isAnnotationPresent(Inheritable.class));
+    }
+}
Index: master/src/main/java/haday/demo/mapper/third/EventsMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- master/src/main/java/haday/demo/mapper/third/EventsMapper.java	(revision 0a08796b0e123b537f769a6288a076b0838b15bf)
+++ master/src/main/java/haday/demo/mapper/third/EventsMapper.java	(date 1573197789854)
@@ -10,6 +10,7 @@
 
 
 public interface EventsMapper {
+
     long countByExample(EventsExample example);
 
     int deleteByExample(EventsExample example);
@@ -31,4 +32,5 @@
     int updateByPrimaryKeySelective(Events record);
 
     int updateByPrimaryKey(Events record);
+
 }
\ No newline at end of file
Index: web/src/main/java/haday/demo/annotation/InheritableSon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/InheritableSon.java	(date 1588236387331)
+++ web/src/main/java/haday/demo/annotation/InheritableSon.java	(date 1588236387331)
@@ -0,0 +1,21 @@
+package haday.demo.annotation;
+
+/**
+ * @Description: 子Inheritable
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 16:45
+ */
+
+public class InheritableSon extends InheritableFather {
+
+    public InheritableSon() {
+        super();    // 调用父类的构造函数
+        // InheritableSon类是否具有 Inheritable Annotation
+        System.out.println("InheritableSon:" + InheritableSon.class.isAnnotationPresent(Inheritable.class));
+    }
+
+    public static void main(String[] args) {
+        InheritableSon is = new InheritableSon();
+    }
+}
Index: web/src/main/java/haday/demo/annotation/MyAnnotation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/MyAnnotation.java	(date 1588238423582)
+++ web/src/main/java/haday/demo/annotation/MyAnnotation.java	(date 1588238423582)
@@ -0,0 +1,20 @@
+package haday.demo.annotation;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * @Description: Annotation在反射函数中的使用示例
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 17:07
+ */
+
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+public @interface MyAnnotation {
+
+    String[] value() default "unknown";
+
+}
Index: web/src/main/java/haday/demo/annotation/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/Person.java	(date 1588237754922)
+++ web/src/main/java/haday/demo/annotation/Person.java	(date 1588237754922)
@@ -0,0 +1,32 @@
+package haday.demo.annotation;
+
+/**
+ * @Description: Person类。它会使用MyAnnotation注解
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 17:08
+ */
+
+public class Person {
+
+    /**
+     * empty()方法同时被 "@Deprecated" 和 "@MyAnnotation(value={"a","b"})"所标注
+     * (01) @Deprecated，意味着empty()方法，不再被建议使用
+     * (02) @MyAnnotation, 意味着empty() 方法对应的MyAnnotation的value值是默认值"unknown"
+     */
+    @MyAnnotation
+    @Deprecated
+    public void empty() {
+        System.out.println("\nempty");
+    }
+
+    /**
+     * sombody() 被 @MyAnnotation(value={"girl","boy"}) 所标注，
+     *
+     * @MyAnnotation(value={"girl","boy"}), 意味着MyAnnotation的value值是{"girl","boy"}
+     */
+    @MyAnnotation(value = {"girl", "boy"})
+    public void somebody(String name, int age) {
+        System.out.println("\nsomebody: " + name + ", " + age);
+    }
+}
Index: web/src/main/java/haday/demo/annotation/AnnotationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/AnnotationTest.java	(date 1588237919955)
+++ web/src/main/java/haday/demo/annotation/AnnotationTest.java	(date 1588237919955)
@@ -0,0 +1,56 @@
+package haday.demo.annotation;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+/**
+ * @Description: 自定义Annotation测试
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 17:10
+ */
+
+public class AnnotationTest {
+
+    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+        // 新建Person
+        Person person = new Person();
+        // 获取Person的Class实例
+        Class<Person> c = Person.class;
+        // 获取 somebody() 方法的Method实例
+        Method mSomebody = c.getMethod("somebody", new Class[]{String.class, int.class});
+        // 执行该方法
+        mSomebody.invoke(person, new Object[]{"lily", 18});
+        iteratorAnnotations(mSomebody);
+
+
+        // 获取 somebody() 方法的Method实例
+        Method mEmpty = c.getMethod("empty", new Class[]{});
+        // 执行该方法
+        mEmpty.invoke(person, new Object[]{});
+        iteratorAnnotations(mEmpty);
+
+    }
+
+    public static void iteratorAnnotations(Method method) {
+
+        // 判断 somebody() 方法是否包含MyAnnotation注解
+        if (method.isAnnotationPresent(MyAnnotation.class)) {
+            // 获取该方法的MyAnnotation注解实例
+            MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class);
+            // 获取 myAnnotation的值，并打印出来
+            String[] values = myAnnotation.value();
+            for (String str : values)
+                System.out.printf(str + ", ");
+            System.out.println();
+        }
+
+        // 获取方法上的所有注解，并打印出来
+        Annotation[] annotations = method.getAnnotations();
+        for (Annotation annotation : annotations) {
+            System.out.println(annotation);
+        }
+    }
+
+}
Index: web/src/main/java/haday/demo/test/Planet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/Planet.java	(date 1588216899951)
+++ web/src/main/java/haday/demo/test/Planet.java	(date 1588216899951)
@@ -0,0 +1,47 @@
+package haday.demo.test;
+
+/**
+ * @Description: Enum type with data and behavior
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 11:21
+ */
+public enum Planet {
+
+    MERCURY(3.302e+23, 2.439e6),
+    VENUS(4.869e+24, 6.052e6),
+    EARTH(5.975e+24, 6.378e6),
+    MARS(6.419e+23, 3.393e6),
+    JUPITER(1.899e+27, 7.149e7),
+    SATURN(5.685e+26, 6.027e7),
+    URANUS(8.683e+25, 2.566e7),
+    NEPTUNE(1.024e+26, 2.477e7);
+    private final double mass; // In kilograms
+    private final double radius; // In meters
+    private final double surfaceGravity; // In m / s^2
+    // Universal gravitational constant in m^3 / kg s^2
+    private static final double G = 6.67300E-11;
+
+    // Constructor
+    Planet(double mass, double radius) {
+        this.mass = mass;
+        this.radius = radius;
+        surfaceGravity = G * mass / (radius * radius);
+    }
+
+    public double mass() {
+        return mass;
+    }
+
+    public double radius() {
+        return radius;
+    }
+
+    public double surfaceGravity() {
+        return surfaceGravity;
+    }
+
+    public double surfaceWeight(double mass) {
+        return mass * surfaceGravity; // F = ma
+    }
+}
Index: web/src/main/java/haday/demo/test/Operation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/Operation.java	(date 1588224548086)
+++ web/src/main/java/haday/demo/test/Operation.java	(date 1588224548086)
@@ -0,0 +1,63 @@
+package haday.demo.test;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @Description: Enum type that switches on its own value - questionable
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 11:31
+ */
+public enum Operation {
+
+
+    PLUS("+") {
+        double apply(double x, double y) {
+            return x + y;
+        }
+    },
+    MINUS("-") {
+        double apply(double x, double y) {
+            return x - y;
+        }
+    },
+    TIMES("*") {
+        double apply(double x, double y) {
+            return x * y;
+        }
+    },
+    DIVIDE("/") {
+        double apply(double x, double y) {
+            return x / y;
+        }
+    };
+    private final String symbol;
+
+    Operation(String symbol) {
+        this.symbol = symbol;
+    }
+
+    @Override
+    public String toString() {
+        return symbol;
+    }
+
+    abstract double apply(double x, double y);
+
+    // Implementation a fromString method on an enum type
+    private static final Map<String, Operation> stringToEnum
+            = new HashMap<String, Operation>();
+
+    static {
+        // Initialize map from contant name to enum constant
+        for (Operation op : values())
+            stringToEnum.put(op.toString(), op);
+    }
+
+    // Returns Operation for String, or null if string is invalid
+    public static Operation fromString(String symbol) {
+        return stringToEnum.get(symbol);
+    }
+
+}
Index: web/src/main/java/haday/demo/test/PayrollDay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/PayrollDay.java	(date 1588229835595)
+++ web/src/main/java/haday/demo/test/PayrollDay.java	(date 1588229835595)
@@ -0,0 +1,45 @@
+package haday.demo.test;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @Description: Enum that switches on its value to share code - questionable
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 13:47
+ */
+public enum PayrollDay {
+
+
+    MONDAY(PayType.WEEKDAY), TUESDAY(PayType.WEEKDAY),
+    WEDNESDAY(PayType.WEEKDAY),THURSDAY(PayType.WEEKDAY),
+    FRIDAY(PayType.WEEKDAY),
+    SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);
+
+    PayrollDay(PayType payType) {
+
+    }
+
+    // The strategy enum type
+    private enum PayType {
+        WEEKDAY {
+            double overtimePay(double hours, double payRate) {
+                return hours <= HOURS_PER_SHIFT ? 0 :
+                        (hours - HOURS_PER_SHIFT) * payRate / 2;
+            }
+        },
+        WEEKEND {
+            double overtimePay(double hours, double payRate) {
+                return hours * payRate / 2;
+            }
+        };
+        private static final int HOURS_PER_SHIFT = 8;
+        abstract double overtimePay(double hours, double payRate);
+        double pay(double hoursWorked, double payRate) {
+            double basePay = hoursWorked * payRate;
+            return basePay + overtimePay(hoursWorked, payRate);
+        }
+    }
+
+}
Index: web/src/main/java/haday/demo/test/Bigram.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/test/Bigram.java	(date 1588235062666)
+++ web/src/main/java/haday/demo/test/Bigram.java	(date 1588235062666)
@@ -0,0 +1,44 @@
+package haday.demo.test;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * @Description: Can you spot the bug?
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 16:17
+ */
+
+public class Bigram {
+
+    private final char first;
+    private final char second;
+
+    public Bigram(char first, char second) {
+        this.first = first;
+        this.second = second;
+    }
+
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof Bigram))
+            return false;
+        Bigram b = (Bigram) obj;
+        return b.first == first && b.second == second;
+    }
+
+    public int hashCode() {
+        return 31 * first + second;
+    }
+
+    public static void main(String[] args) {
+        Set<Bigram> s = new HashSet<Bigram>();
+        for (int i = 0; i < 10; i++)
+            for (char ch = 'a'; ch <= 'z'; ch++)
+                s.add(new Bigram(ch, ch));
+        System.out.println(s.size());
+    }
+
+}
Index: web/src/main/java/haday/demo/annotation/MyAnnotation1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/haday/demo/annotation/MyAnnotation1.java	(date 1588235814960)
+++ web/src/main/java/haday/demo/annotation/MyAnnotation1.java	(date 1588235814960)
@@ -0,0 +1,17 @@
+package haday.demo.annotation;
+
+
+import java.lang.annotation.*;
+
+/**
+ * @Description: 我的第一个注解
+ * @Author: dingj
+ * @DATA: 2020/4/30
+ * @TIME: 16:30
+ */
+
+@Documented
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface MyAnnotation1 {
+}
